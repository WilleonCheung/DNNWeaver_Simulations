1. "formatted_data" folder contains pre-formatted weights, bias and image data
   for systolic array sizes 8x8, 16x16 and 32x32. Structure is as follows,

|-- formatted_data
|   |--  formatted_data/16x16                               : Formatted data for 16x16 
|   |   |--  formatted_data/16x16/tiny_yolo2_bias.tar.gz
|   |   |--  formatted_data/16x16/tiny_yolo2_data1.tar.gz
|   |   |--  formatted_data/16x16/tiny_yolo2_data2.tar.gz
|   |   |--  formatted_data/16x16/tiny_yolo2_data3.tar.gz
|   |   |--  formatted_data/16x16/tiny_yolo2_data4.tar.gz
|   |   |--  formatted_data/16x16/tiny_yolo2_image.tar.gz
|   |--  formatted_data/32x32                               : Formatted data for 32x32
|   |   |--  formatted_data/32x32/tiny_yolo2_bias.tar.gz
|   |   |--  formatted_data/32x32/tiny_yolo2_data1.tar.gz
|   |   |--  formatted_data/32x32/tiny_yolo2_data2.tar.gz
|   |   |--  formatted_data/32x32/tiny_yolo2_data3.tar.gz
|   |   |--  formatted_data/32x32/tiny_yolo2_data4.tar.gz
|   |   |--  formatted_data/32x32/tiny_yolo2_image.tar.gz
|   |--  formatted_data/8x8                                 : Formatted data for 8x8    
|   |   |--  formatted_data/8x8/tiny_yolo2_bias.tar.gz
|   |   |--  formatted_data/8x8/tiny_yolo2_data1.tar.gz
|   |   |--  formatted_data/8x8/tiny_yolo2_data2.tar.gz
|   |   |--  formatted_data/8x8/tiny_yolo2_data3.tar.gz
|   |   |--  formatted_data/8x8/tiny_yolo2_data4.tar.gz
|   |   |--  formatted_data/8x8/tiny_yolo2_image.tar.gz

2. "sample" folder contains DW2 provided test image, provided sample output and output 
   generated by DW2 8x8 simulation.

|-- sample
|   |--  sample/bbox-test.jpg           : 8x8 DW2 simulation processed output
|   |--  sample/sample-bbox-test.jpg    : DW2 provided sample output
|   |--  sample/test.jpg                : DW2 provided test image
|   |--  sample/final_conv8_output.txt  : DW2 raw simulation output

3. "scripts" folder contains scripts required to generate formatted input data for
    different systolic array sizes (4x4, 8x8, 16x16, 32x32). It also contains scripts
    to produce final output.

    |-- scripts
    |   |--  scripts/conf                               : Required for darkflow
    |   |   |--  scripts/conf/tiny-yolo-voc.cfg
    |   |   |--  scripts/conf/tiny-yolo-voc.weights
    |   |--  scripts/convert.py                         : Convert hex data to binary
    |   |--  scripts/create_out.py                      : Create formatted output jpg from the binary
    |   |--  scripts/dataPrepScripts                    : Contain scripts to generated formatted input data
    |   |   |--  scripts/dataPrepScripts/16x16              : Systolic array 16x16
    |   |   |--  scripts/dataPrepScripts/32x32              : Systolic array 32x32
    |   |   |--  scripts/dataPrepScripts/4x4                : Systolic array 4x4
    |   |   |--  scripts/dataPrepScripts/8x8                : Systolic array 8x8    
    |   |--  scripts/yolo2_weights                      : tiny yolo2 weights for DW2 and Tensorflow. 
    |   |   |--  scripts/yolo2_weights/yolo2_tiny_dnnweaver2_weights.pickle
    |   |   |--  scripts/yolo2_weights/yolo2_tiny_tf_weights.pickle

    A. Final output preparation:
       1. Final output will be in final_conv8_output.txt file
       2. tiny yolo2 final output size is 13x13x128. Copy first 21632 (13x13x128)
          data from the first column of the file final_conv8_output.txt to another
          file. (Let's say output.hex)
       3. Convert the output.hex to binary using the script convert.py
          >./convert.py -i output.hex
          [This will create a file called 'converted.bin']
       4. Now run create_out.py in the same directory. It reads 'converted.bin'
          and create the output jpg file [bbox-test.jpg].

    B. Formatted weight data preparation:
        1. read_pickle.py script is provide in each 'scripts/dataPrepScripts/*' folder.
           This read yolo2_tiny_dnnweaver2_weights.pickle file and generate binary data 
           in the required format for the specific systolic array size.
        2. Then hexdump is used to convert the binary to required hexadecimal format.
           toHex.sh is provided in each 'scripts/dataPrepScripts/*' folder which converts
           the binary to hex.
    
    C. Formatted input image data preparation:
        1. input_prep.py script is provide in each 'scripts/dataPrepScripts/*' folder.
           Currently it reads test.jpg from sample folder and creates formatted input
           for a specific systolic array size in binary.
        2. Then hexdump is used to convert the binary to required hexadecimal format.
           toHex.sh is provided in each 'scripts/dataPrepScripts/*' folder which converts
           the binary to hex.

    D. Order of execution for preparing formatted data should be as the example given below,
        1. cd scripts/dataPrepScripts/8x8/
        2. ./input_prep.py >& input.log
        3. ./read_pickle.py >& weights.log
        4. ./toHex.sh
        
        After the above steps, hex data should be in the following folders in the run path,
            a. image : Will have input image data
            b. bias  : Will have all the layers' bias data
            c. data1 : Weight, scale and mean for conv0 to conv5
            d. data2 : Weight, scale and mean for conv6
            e. data3 : Weight, scale and mean for conv7
            f. data4 : Weight, scale and mean for conv8

            Above type of arrangement was created to make it easier to transfer via outlook
            email.
        [Note: read_pickle.py will create data in binary format. *.bin files will be created. So this 
               binary data can be used with actual FPGA board directly.]    
